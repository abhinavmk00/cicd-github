# GitHub Actions workflow for secure CI/CD pipeline
name: security

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  security_checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Secure Secrets Injection
        run: |
          echo "Securely injecting secrets into environment..."
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" > .env
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
          echo "FLASK_ENV=production" >> .env
          # Ensure .env file has proper permissions
          chmod 600 .env
          echo "Secrets injected securely (not exposed in logs)"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit pip-audit

      - name: Static Code Analysis with Bandit
        run: |
          bandit -r app/ -f json -o bandit-report.json || echo "Bandit scan completed with findings"
          bandit -r app/ || echo "Bandit found security issues - check the report"

      - name: Dependency Vulnerability Scan
        run: |
          echo "Running pip-audit for dependency vulnerability scanning..."
          pip-audit --requirement requirements.txt --format=json --output=pip-audit-report.json || echo "pip-audit completed with findings"
          
      - name: Dependency Scan with Snyk (Mandatory)
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          if [ -z "$SNYK_TOKEN" ]; then
            echo "ERROR: SNYK_TOKEN is required for security compliance"
            echo "Please add SNYK_TOKEN to repository secrets"
            exit 1
          fi
          echo "Running mandatory Snyk vulnerability scan..."
          docker pull snyk/snyk:python-3.11
          docker run --rm -e SNYK_TOKEN=${SNYK_TOKEN} -v $(pwd):/project -w /project snyk/snyk:python-3.11 snyk test --file=requirements.txt --severity-threshold=high

      - name: Docker Build
        run: |
          docker build -t secure-flask-app .

      - name: Container Scan with Trivy
        run: |
          docker pull aquasec/trivy:0.18.3 || true
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:0.18.3 image secure-flask-app

      - name: Secrets Scanning with Gitleaks
        uses: zricethezav/gitleaks-action@v2
        with:
          args: --no-git --path=.

            # Run the container in background for DAST
      - name: Start container
        run: |
          echo "Starting container for security testing..."
          docker run -d --name app-under-test -p 5001:5001 \
            -e FLASK_ENV=production \
            -e SECRET_KEY=test-key-for-security-testing \
            -e DATABASE_URL=sqlite:///test.db \
            secure-flask-app
          
          echo "Waiting for container to be ready..."
          sleep 5
          
          # Check container status
          docker ps -a --filter name=app-under-test
          docker logs app-under-test
          
          # Wait for app to be ready (HTTP 200)
          for i in {1..30}; do
            echo "Attempt $i: Checking if app is ready..."
            status=$(curl -o /dev/null -s -w "%{http_code}\n" http://localhost:5001 || echo "000")
            echo "HTTP Status: $status"
            if [ "$status" -eq 200 ]; then
              echo "App is ready!"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "App failed to start after 30 attempts"
              docker logs app-under-test
              exit 1
            fi
            sleep 2
          done

      - name: Run OWASP ZAP Full Scan
        uses: zaproxy/action-full-scan@v0.7.0
        with:
          target: 'http://localhost:5001'
          fail_action: false
          token: ${{ secrets.ZAP_GITHUB_PAT }}
          allow_issue_writing: true

      - name: Count ZAP Warnings
        id: zap_warnings
        run: |
          WARN_COUNT=0
          if [ -f report_json.json ]; then
            WARN_COUNT=$(jq '[.alerts[] | select(.risk == "Medium" or .risk == "High")] | length' report_json.json)
          fi
          echo "ZAP_WARNINGS=$WARN_COUNT" >> $GITHUB_ENV
          echo "ZAP found $WARN_COUNT medium/high warnings"

      - name: Collect ZAP report and publish to gh-pages
        if: always()
        env:
          GITHUB_TOKEN: ${{ secrets.ZAP_GITHUB_PAT }}
        run: |
          # Use safe timestamp for filenames
          REPORT_NAME="zap_report_$(date +'%Y%m%d%H%M%S').html"
          if [ -f report_html.html ]; then
            echo "Publishing ZAP security report to GitHub Pages..."
            mv report_html.html "$REPORT_NAME"
            git config --global user.name "github-actions"
            git config --global user.email "actions@github.com"
            git fetch origin || true
            git checkout --orphan gh-pages || git checkout gh-pages || git switch --orphan gh-pages
            git rm -rf . || true
            cp "$REPORT_NAME" index.html
            echo "# Security Report" > README.md
            echo "Latest security scan report: [View Report](./index.html)" >> README.md
            echo "Generated: $(date)" >> README.md
            git add index.html README.md
            git commit -m "Publish ZAP report: $REPORT_NAME (Run ID: $GITHUB_RUN_ID)" || true
            git push https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }} gh-pages --force || echo "Failed to push to gh-pages"
            echo "Security report should be available at: https://${{ github.repository_owner }}.github.io/secure-cicd-pipeline"
          else
            echo "ZAP report not found"
          fi

      - name: Stop container
        if: always()
        run: |
          docker stop app-under-test || true
          docker rm app-under-test || true

      - name: Login to Docker Hub
        if: success() && env.ZAP_WARNINGS != '' && env.ZAP_WARNINGS < 5
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push to Docker Hub
        if: success() && env.ZAP_WARNINGS != '' && env.ZAP_WARNINGS < 5
        run: |
          echo "All security scans passed (or warnings < 5)! Building and pushing to Docker Hub..."
          COMMIT_SHA=$(git rev-parse --short HEAD)
          IMAGE_NAME="${{ secrets.DOCKERHUB_USERNAME }}/secure-flask-app"
          docker build -t ${IMAGE_NAME}:${COMMIT_SHA} -t ${IMAGE_NAME}:latest .
          docker push ${IMAGE_NAME}:${COMMIT_SHA}
          docker push ${IMAGE_NAME}:latest
          echo "Successfully pushed to Docker Hub:"
          echo "- ${IMAGE_NAME}:${COMMIT_SHA}"
          echo "- ${IMAGE_NAME}:latest"

      - name: Security Scan Summary
        if: always()
        run: |
          echo "=== SECURITY SCAN SUMMARY ==="
          echo "✅ Static Code Analysis (Bandit): Completed"
          echo "✅ Dependency Vulnerability Scan (pip-audit): Completed"
          echo "✅ Dependency Scan (Snyk): Completed"
          echo "✅ Container Security Scan (Trivy): Completed"
          echo "✅ Secrets Scanning (Gitleaks): Completed"
          echo "✅ Dynamic Security Testing (OWASP ZAP): Completed"
          echo "📊 Security Report: https://${{ github.repository_owner }}.github.io/secure-cicd-pipeline"
          if [ "${{ job.status }}" == "success" ] && [ "$ZAP_WARNINGS" -lt 5 ]; then
            echo "🚀 Docker Image: Published to Docker Hub"
          else
            echo "❌ Docker Image: Not published due to security issues or too many ZAP warnings"
          fi
